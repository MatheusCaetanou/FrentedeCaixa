import pandas as pd
import streamlit as st
import os

os.chdir("C:/Users/Matheus/IdeaProjects/FRENTE DE CAIXA/frente_caixa_analise")  # Define o diret칩rio correto
print("Diret칩rio ajustado para:", os.getcwd())  # Verifica se foi alterado com sucess

print("Diret칩rio atual:", os.getcwd())  # Mostra o diret칩rio de execu칞칚o
print("Arquivos na pasta:", os.listdir())  # Lista todos os arquivos na pasta
print("Arquivo existe?", os.path.exists("Produtos.csv"))  # Confirma se o CSV est치 acess칤vel

df = pd.read_csv("C:/Users/Matheus/IdeaProjects/FRENTE DE CAIXA/frente_caixa_analise/Produtos.csv", sep=";", encoding="utf-8", engine="python")

# Carregar CSV
df = pd.read_csv("Produtos.csv", sep=";", encoding="utf-8", engine="python")

# Limpeza
df.columns = df.columns.str.strip()
df["Pre칞o de Custo"] = pd.to_numeric(df.get("Pre칞o de Custo"), errors="coerce")
df["Pre칞o Venda Varejo"] = pd.to_numeric(df.get("Pre칞o Venda Varejo"), errors="coerce")
df["Quantidade M칤nima Atacado"] = pd.to_numeric(df.get("Quantidade M칤nima Atacado"), errors="coerce")
if "Ativo" in df.columns:
    df["Ativo"] = df["Ativo"].astype(str).str.strip().str.lower()

# Detectar a coluna de estoque
estoque_col = next((col for col in df.columns if "estoque" in col.lower()), None)
if estoque_col:
    df[estoque_col] = pd.to_numeric(df[estoque_col], errors="coerce")

# Layout
st.set_page_config(page_title="An치lise de Produtos", layout="wide")
st.title("游늵 An치lise de Produtos da Loja")

# Produtos inativos
if "Ativo" in df.columns:
    inativos = df[df["Ativo"] != "sim"]
    st.subheader("Produtos Inativos")
    st.dataframe(inativos[["Descri칞칚o", "Ativo"]])

# Estoque zerado e abaixo do m칤nimo
if estoque_col:
    zerado = df[df[estoque_col] <= 0]
    st.subheader("Produtos com Estoque Zerado")
    st.dataframe(zerado[["Descri칞칚o", estoque_col]])

    if "Quantidade M칤nima Atacado" in df.columns:
        reposicao = df[
            (df[estoque_col] < df["Quantidade M칤nima Atacado"]) &
            (df["Quantidade M칤nima Atacado"] > 0)
        ]
        st.subheader("Produtos com Estoque Abaixo do M칤nimo")
        st.dataframe(reposicao[["Descri칞칚o", estoque_col, "Quantidade M칤nima Atacado"]])

# Calcular margens
df = df[df["Pre칞o de Custo"] > 0]
df["Margem Lucro (%)"] = ((df["Pre칞o Venda Varejo"] - df["Pre칞o de Custo"]) / df["Pre칞o de Custo"]) * 100
df["Margem Lucro (R$)"] = df["Pre칞o Venda Varejo"] - df["Pre칞o de Custo"]

# Top lucro absoluto
top_lucro = df.sort_values(by="Margem Lucro (R$)", ascending=False).head(10)
st.subheader("Top 10 Produtos com Maior Lucro Unit치rio")
st.dataframe(top_lucro[["Descri칞칚o", "Pre칞o de Custo", "Pre칞o Venda Varejo", "Margem Lucro (R$)"]])

st.subheader("Gr치fico de Lucro Unit치rio")
st.bar_chart(top_lucro.set_index("Descri칞칚o")["Margem Lucro (R$)"])

# Sugest칚o de promo칞칚o
st.subheader("Sugest칫es de Promo칞칫es (Maior Lucro)")
if estoque_col:
    st.dataframe(top_lucro[["Descri칞칚o", "Margem Lucro (R$)", estoque_col]])
else:
    st.dataframe(top_lucro[["Descri칞칚o", "Margem Lucro (R$)"]])
